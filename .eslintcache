[{"C:\\Users\\jeje2\\Desktop\\proj\\exercise-log\\src\\reportWebVitals.js":"1","C:\\Users\\jeje2\\Desktop\\proj\\exercise-log\\src\\App.js":"2","C:\\Users\\jeje2\\Desktop\\proj\\exercise-log\\src\\login\\Login_Register.js":"3","C:\\Users\\jeje2\\Desktop\\proj\\exercise-log\\src\\index.js":"4"},{"size":362,"mtime":1611524248652,"results":"5","hashOfConfig":"6"},{"size":209,"mtime":1611525269512,"results":"7","hashOfConfig":"6"},{"size":5047,"mtime":1611554033091,"results":"8","hashOfConfig":"6"},{"size":500,"mtime":1611524248652,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1z0ybsc",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"14","messages":"15","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\jeje2\\Desktop\\proj\\exercise-log\\src\\reportWebVitals.js",[],"C:\\Users\\jeje2\\Desktop\\proj\\exercise-log\\src\\App.js",["19"],"C:\\Users\\jeje2\\Desktop\\proj\\exercise-log\\src\\login\\Login_Register.js",["20","21","22"],"import React, {Component} from 'react'\r\nimport firebase from \"../Firestore\"\r\n\r\nclass Login_Register extends Component{\r\n    state={\r\n        login_or_register:true,\r\n        login_correct:true,\r\n        user_value:\"\",\r\n        password_value:\"\",\r\n        userId:\"\",\r\n        partial:null\r\n    }\r\n\r\n    checkIfLoginCorrect=(e)=>{\r\n        e.preventDefault();\r\n        this.setState({login_or_register:true})\r\n\r\n        this.checkUser()\r\n    }\r\n\r\n    checkIfRegisterCorrect=(e)=>{\r\n        e.preventDefault();\r\n        this.setState({login_or_register:false})\r\n        this.createUser()\r\n    }\r\n\r\n    partialRender=()=>{\r\n        if(this.state.user_value.trim()===\"\" && this.state.password_value.trim()===\"\"){\r\n            return(\r\n            <div>\r\n                <br></br>\r\n                Username and password missing\r\n            </div>)\r\n        }else if(this.state.user_value.trim()===\"\" && !(this.state.password_value.trim()===\"\")){\r\n            return(\r\n            <div>\r\n                <br></br>\r\n                Username missing\r\n            </div>)\r\n        }else if(!(this.state.user_value.trim()===\"\") && this.state.password_value.trim()===\"\"){\r\n            return(\r\n            <div>\r\n                <br></br>\r\n                Password missing\r\n            </div>)\r\n        }else{\r\n            if(this.state.login_or_register){\r\n                return(\r\n                <div>\r\n                    <br></br>\r\n                    Username and/or password incorrect\r\n                </div>)\r\n            }else{\r\n                return(\r\n                    <div>\r\n                        <br></br>\r\n                        A user already exists with that username\r\n                    </div>)\r\n            }\r\n        }\r\n    }\r\n\r\n    checkUser=()=>{\r\n        let username=this.state.user_value\r\n        let password=this.state.password_value\r\n        let empty=true\r\n        let userRef=null\r\n        if(!(username.trim()===\"\" || password.trim()===\"\")){\r\n            const db=firebase.firestore()\r\n            let users= db.collection('users').where('username','==',username).where('password','==',password)\r\n            users.get().then((querySnapshot)=>{\r\n                empty=querySnapshot.empty\r\n                if(!querySnapshot.empty){\r\n                    querySnapshot.forEach((doc)=>{\r\n                        userRef=doc\r\n                    })\r\n                }\r\n            }).then(()=>{\r\n                if(!empty){\r\n                    this.setState({login_correct:true,userId:userRef.id,partial:null})\r\n                }else{\r\n                    let partial=this.partialRender()\r\n                    this.setState({login_correct:false,partial:partial})\r\n                }\r\n            })\r\n        }else{\r\n            let partial=this.partialRender()\r\n            this.setState({login_correct:false, partial:partial})\r\n\r\n        }\r\n    }\r\n\r\n    createUser=()=>{\r\n        let username=this.state.user_value\r\n        let password=this.state.password_value\r\n        let empty=true\r\n        console.log(this.state.user_value, this.state.password_value)\r\n        if(!(username.trim()===\"\" || password.trim()===\"\")){\r\n            const db=firebase.firestore()\r\n            let existing_users= db.collection('users').where('username','==',username)\r\n            existing_users.get().then((querySnapshot)=>{\r\n                empty=querySnapshot.empty\r\n            }).then(()=>{\r\n                if(empty){\r\n                    const userRef=db.collection(\"users\").add({\r\n                        username: username,\r\n                        password: password\r\n                    }).then((doc)=>{\r\n                        this.setState({login_correct:true, userId:doc.id, partial:null})\r\n                    })\r\n                }else{\r\n                    let partial=this.partialRender()\r\n                    this.setState({login_correct:false,partial:partial})\r\n                }\r\n            })\r\n        }else{\r\n            let partial=this.partialRender()\r\n            this.setState({login_correct:false,partial:partial})\r\n        }\r\n    }\r\n\r\n    upDateUsername=(e)=>{\r\n        this.setState({user_value:e.target.value})\r\n    }\r\n\r\n    upDatePassword=(e)=>{\r\n        this.setState({password_value:e.target.value})\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                Login\r\n                {this.state.partial}\r\n                <br></br>\r\n                <input type=\"text\" id=\"username\" onChange={this.upDateUsername} value={this.state.user_value} placeholder=\"Username\"/>\r\n                <br></br>\r\n                <input type=\"password\" id=\"password\" onChange={this.upDatePassword} value={this.state.password_value} placeholder=\"Password\"/>\r\n                <br></br>\r\n                <button type=\"button\" id=\"login-in-button\" onClick={this.checkIfLoginCorrect}>Log In</button>\r\n                <button type=\"button\" id=\"register-button\" onClick={this.checkIfRegisterCorrect}>Register</button>\r\n                <a></a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login_Register","C:\\Users\\jeje2\\Desktop\\proj\\exercise-log\\src\\index.js",[],{"ruleId":"23","severity":1,"message":"24","line":8,"column":7,"nodeType":"25","endLine":8,"endColumn":24},{"ruleId":"26","severity":1,"message":"27","line":105,"column":27,"nodeType":"28","messageId":"29","endLine":105,"endColumn":34},{"ruleId":"30","severity":1,"message":"31","line":142,"column":17,"nodeType":"25","endLine":142,"endColumn":20},{"ruleId":"32","severity":1,"message":"33","line":142,"column":17,"nodeType":"25","endLine":142,"endColumn":20},"react/jsx-pascal-case","Imported JSX component Login_Register must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","no-unused-vars","'userRef' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md"]